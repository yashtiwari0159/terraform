name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Azure CLI
      uses: azure/CLI@v1
      with:
         azcliversion: 2.32.0
         inlineScript: |
            az --version
      env: 
          AZURE_CONFIG_DIR:  ${{ runner.workspace }}/.azure
    - name: Login to Azure
      run: az login --service-principal --tenant ${{ secrets.AZURE_TENANT_ID }} --username ${{ secrets.AZURE_CLIENT_ID }} --password ${{ secrets.AZURE_CLIENT_SECRET }}
         
      env:
         AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
         AZURE_CONFIG_DIR:  ${{ runner.workspace }}/.azure
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      env: 
          AZURE_CONFIG_DIR:  ${{ runner.workspace }}/.azure

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      env: 
          AZURE_CONFIG_DIR:  ${{ runner.workspace }}/.azure

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Version
      run: terraform version
      env: 
          AZURE_CONFIG_DIR:  ${{ runner.workspace }}/.azure

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      env: 
          AZURE_CONFIG_DIR:  ${{ runner.workspace }}/.azure

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
      env: 
          AZURE_CONFIG_DIR:  ${{ runner.workspace }}/.azure
